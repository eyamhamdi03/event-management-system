/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as OrganizerOrganizerIdEventsImport } from './routes/organizer/$organizerId/events'
import { Route as EventDetailsPageImport } from './routes/event/details/page'
import { Route as EventAddPageImport } from './routes/event/add/page'
import { Route as CategoryAddPageImport } from './routes/category/add/page'
import { Route as AuthSignupPageImport } from './routes/auth/signup/page'
import { Route as AuthLoginPageImport } from './routes/auth/login/page'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrganizerOrganizerIdEventsRoute = OrganizerOrganizerIdEventsImport.update(
  {
    id: '/organizer/$organizerId/events',
    path: '/organizer/$organizerId/events',
    getParentRoute: () => rootRoute,
  } as any,
)

const EventDetailsPageRoute = EventDetailsPageImport.update({
  id: '/event/details/page',
  path: '/event/details/page',
  getParentRoute: () => rootRoute,
} as any)

const EventAddPageRoute = EventAddPageImport.update({
  id: '/event/add/page',
  path: '/event/add/page',
  getParentRoute: () => rootRoute,
} as any)

const CategoryAddPageRoute = CategoryAddPageImport.update({
  id: '/category/add/page',
  path: '/category/add/page',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupPageRoute = AuthSignupPageImport.update({
  id: '/auth/signup/page',
  path: '/auth/signup/page',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginPageRoute = AuthLoginPageImport.update({
  id: '/auth/login/page',
  path: '/auth/login/page',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login/page': {
      id: '/auth/login/page'
      path: '/auth/login/page'
      fullPath: '/auth/login/page'
      preLoaderRoute: typeof AuthLoginPageImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup/page': {
      id: '/auth/signup/page'
      path: '/auth/signup/page'
      fullPath: '/auth/signup/page'
      preLoaderRoute: typeof AuthSignupPageImport
      parentRoute: typeof rootRoute
    }
    '/category/add/page': {
      id: '/category/add/page'
      path: '/category/add/page'
      fullPath: '/category/add/page'
      preLoaderRoute: typeof CategoryAddPageImport
      parentRoute: typeof rootRoute
    }
    '/event/add/page': {
      id: '/event/add/page'
      path: '/event/add/page'
      fullPath: '/event/add/page'
      preLoaderRoute: typeof EventAddPageImport
      parentRoute: typeof rootRoute
    }
    '/event/details/page': {
      id: '/event/details/page'
      path: '/event/details/page'
      fullPath: '/event/details/page'
      preLoaderRoute: typeof EventDetailsPageImport
      parentRoute: typeof rootRoute
    }
    '/organizer/$organizerId/events': {
      id: '/organizer/$organizerId/events'
      path: '/organizer/$organizerId/events'
      fullPath: '/organizer/$organizerId/events'
      preLoaderRoute: typeof OrganizerOrganizerIdEventsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login/page': typeof AuthLoginPageRoute
  '/auth/signup/page': typeof AuthSignupPageRoute
  '/category/add/page': typeof CategoryAddPageRoute
  '/event/add/page': typeof EventAddPageRoute
  '/event/details/page': typeof EventDetailsPageRoute
  '/organizer/$organizerId/events': typeof OrganizerOrganizerIdEventsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login/page': typeof AuthLoginPageRoute
  '/auth/signup/page': typeof AuthSignupPageRoute
  '/category/add/page': typeof CategoryAddPageRoute
  '/event/add/page': typeof EventAddPageRoute
  '/event/details/page': typeof EventDetailsPageRoute
  '/organizer/$organizerId/events': typeof OrganizerOrganizerIdEventsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/login/page': typeof AuthLoginPageRoute
  '/auth/signup/page': typeof AuthSignupPageRoute
  '/category/add/page': typeof CategoryAddPageRoute
  '/event/add/page': typeof EventAddPageRoute
  '/event/details/page': typeof EventDetailsPageRoute
  '/organizer/$organizerId/events': typeof OrganizerOrganizerIdEventsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login/page'
    | '/auth/signup/page'
    | '/category/add/page'
    | '/event/add/page'
    | '/event/details/page'
    | '/organizer/$organizerId/events'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login/page'
    | '/auth/signup/page'
    | '/category/add/page'
    | '/event/add/page'
    | '/event/details/page'
    | '/organizer/$organizerId/events'
  id:
    | '__root__'
    | '/'
    | '/auth/login/page'
    | '/auth/signup/page'
    | '/category/add/page'
    | '/event/add/page'
    | '/event/details/page'
    | '/organizer/$organizerId/events'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginPageRoute: typeof AuthLoginPageRoute
  AuthSignupPageRoute: typeof AuthSignupPageRoute
  CategoryAddPageRoute: typeof CategoryAddPageRoute
  EventAddPageRoute: typeof EventAddPageRoute
  EventDetailsPageRoute: typeof EventDetailsPageRoute
  OrganizerOrganizerIdEventsRoute: typeof OrganizerOrganizerIdEventsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginPageRoute: AuthLoginPageRoute,
  AuthSignupPageRoute: AuthSignupPageRoute,
  CategoryAddPageRoute: CategoryAddPageRoute,
  EventAddPageRoute: EventAddPageRoute,
  EventDetailsPageRoute: EventDetailsPageRoute,
  OrganizerOrganizerIdEventsRoute: OrganizerOrganizerIdEventsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login/page",
        "/auth/signup/page",
        "/category/add/page",
        "/event/add/page",
        "/event/details/page",
        "/organizer/$organizerId/events"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login/page": {
      "filePath": "auth/login/page.tsx"
    },
    "/auth/signup/page": {
      "filePath": "auth/signup/page.tsx"
    },
    "/category/add/page": {
      "filePath": "category/add/page.tsx"
    },
    "/event/add/page": {
      "filePath": "event/add/page.tsx"
    },
    "/event/details/page": {
      "filePath": "event/details/page.tsx"
    },
    "/organizer/$organizerId/events": {
      "filePath": "organizer/$organizerId/events.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
