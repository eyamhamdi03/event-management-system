/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as EventEventsPageImport } from './routes/event/events/page'
import { Route as EventAddPageImport } from './routes/event/add/page'
import { Route as EventMyEventsPageImport } from './routes/event/MyEvents/page'
import { Route as EventEventIdPageImport } from './routes/event/$eventId/page'
import { Route as CategoryAddPageImport } from './routes/category/add/page'
import { Route as AuthSignupPageImport } from './routes/auth/signup/page'
import { Route as AuthLoginPageImport } from './routes/auth/login/page'
import { Route as AuthCallbackPageImport } from './routes/auth/callback/page'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EventEventsPageRoute = EventEventsPageImport.update({
  id: '/event/events/page',
  path: '/event/events/page',
  getParentRoute: () => rootRoute,
} as any)

const EventAddPageRoute = EventAddPageImport.update({
  id: '/event/add/page',
  path: '/event/add/page',
  getParentRoute: () => rootRoute,
} as any)

const EventMyEventsPageRoute = EventMyEventsPageImport.update({
  id: '/event/MyEvents/page',
  path: '/event/MyEvents/page',
  getParentRoute: () => rootRoute,
} as any)

const EventEventIdPageRoute = EventEventIdPageImport.update({
  id: '/event/$eventId/page',
  path: '/event/$eventId/page',
  getParentRoute: () => rootRoute,
} as any)

const CategoryAddPageRoute = CategoryAddPageImport.update({
  id: '/category/add/page',
  path: '/category/add/page',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupPageRoute = AuthSignupPageImport.update({
  id: '/auth/signup/page',
  path: '/auth/signup/page',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginPageRoute = AuthLoginPageImport.update({
  id: '/auth/login/page',
  path: '/auth/login/page',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackPageRoute = AuthCallbackPageImport.update({
  id: '/auth/callback/page',
  path: '/auth/callback/page',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/callback/page': {
      id: '/auth/callback/page'
      path: '/auth/callback/page'
      fullPath: '/auth/callback/page'
      preLoaderRoute: typeof AuthCallbackPageImport
      parentRoute: typeof rootRoute
    }
    '/auth/login/page': {
      id: '/auth/login/page'
      path: '/auth/login/page'
      fullPath: '/auth/login/page'
      preLoaderRoute: typeof AuthLoginPageImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup/page': {
      id: '/auth/signup/page'
      path: '/auth/signup/page'
      fullPath: '/auth/signup/page'
      preLoaderRoute: typeof AuthSignupPageImport
      parentRoute: typeof rootRoute
    }
    '/category/add/page': {
      id: '/category/add/page'
      path: '/category/add/page'
      fullPath: '/category/add/page'
      preLoaderRoute: typeof CategoryAddPageImport
      parentRoute: typeof rootRoute
    }
    '/event/$eventId/page': {
      id: '/event/$eventId/page'
      path: '/event/$eventId/page'
      fullPath: '/event/$eventId/page'
      preLoaderRoute: typeof EventEventIdPageImport
      parentRoute: typeof rootRoute
    }
    '/event/MyEvents/page': {
      id: '/event/MyEvents/page'
      path: '/event/MyEvents/page'
      fullPath: '/event/MyEvents/page'
      preLoaderRoute: typeof EventMyEventsPageImport
      parentRoute: typeof rootRoute
    }
    '/event/add/page': {
      id: '/event/add/page'
      path: '/event/add/page'
      fullPath: '/event/add/page'
      preLoaderRoute: typeof EventAddPageImport
      parentRoute: typeof rootRoute
    }
    '/event/events/page': {
      id: '/event/events/page'
      path: '/event/events/page'
      fullPath: '/event/events/page'
      preLoaderRoute: typeof EventEventsPageImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/callback/page': typeof AuthCallbackPageRoute
  '/auth/login/page': typeof AuthLoginPageRoute
  '/auth/signup/page': typeof AuthSignupPageRoute
  '/category/add/page': typeof CategoryAddPageRoute
  '/event/$eventId/page': typeof EventEventIdPageRoute
  '/event/MyEvents/page': typeof EventMyEventsPageRoute
  '/event/add/page': typeof EventAddPageRoute
  '/event/events/page': typeof EventEventsPageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/callback/page': typeof AuthCallbackPageRoute
  '/auth/login/page': typeof AuthLoginPageRoute
  '/auth/signup/page': typeof AuthSignupPageRoute
  '/category/add/page': typeof CategoryAddPageRoute
  '/event/$eventId/page': typeof EventEventIdPageRoute
  '/event/MyEvents/page': typeof EventMyEventsPageRoute
  '/event/add/page': typeof EventAddPageRoute
  '/event/events/page': typeof EventEventsPageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/callback/page': typeof AuthCallbackPageRoute
  '/auth/login/page': typeof AuthLoginPageRoute
  '/auth/signup/page': typeof AuthSignupPageRoute
  '/category/add/page': typeof CategoryAddPageRoute
  '/event/$eventId/page': typeof EventEventIdPageRoute
  '/event/MyEvents/page': typeof EventMyEventsPageRoute
  '/event/add/page': typeof EventAddPageRoute
  '/event/events/page': typeof EventEventsPageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/callback/page'
    | '/auth/login/page'
    | '/auth/signup/page'
    | '/category/add/page'
    | '/event/$eventId/page'
    | '/event/MyEvents/page'
    | '/event/add/page'
    | '/event/events/page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/callback/page'
    | '/auth/login/page'
    | '/auth/signup/page'
    | '/category/add/page'
    | '/event/$eventId/page'
    | '/event/MyEvents/page'
    | '/event/add/page'
    | '/event/events/page'
  id:
    | '__root__'
    | '/'
    | '/auth/callback/page'
    | '/auth/login/page'
    | '/auth/signup/page'
    | '/category/add/page'
    | '/event/$eventId/page'
    | '/event/MyEvents/page'
    | '/event/add/page'
    | '/event/events/page'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthCallbackPageRoute: typeof AuthCallbackPageRoute
  AuthLoginPageRoute: typeof AuthLoginPageRoute
  AuthSignupPageRoute: typeof AuthSignupPageRoute
  CategoryAddPageRoute: typeof CategoryAddPageRoute
  EventEventIdPageRoute: typeof EventEventIdPageRoute
  EventMyEventsPageRoute: typeof EventMyEventsPageRoute
  EventAddPageRoute: typeof EventAddPageRoute
  EventEventsPageRoute: typeof EventEventsPageRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthCallbackPageRoute: AuthCallbackPageRoute,
  AuthLoginPageRoute: AuthLoginPageRoute,
  AuthSignupPageRoute: AuthSignupPageRoute,
  CategoryAddPageRoute: CategoryAddPageRoute,
  EventEventIdPageRoute: EventEventIdPageRoute,
  EventMyEventsPageRoute: EventMyEventsPageRoute,
  EventAddPageRoute: EventAddPageRoute,
  EventEventsPageRoute: EventEventsPageRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/callback/page",
        "/auth/login/page",
        "/auth/signup/page",
        "/category/add/page",
        "/event/$eventId/page",
        "/event/MyEvents/page",
        "/event/add/page",
        "/event/events/page"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/callback/page": {
      "filePath": "auth/callback/page.tsx"
    },
    "/auth/login/page": {
      "filePath": "auth/login/page.tsx"
    },
    "/auth/signup/page": {
      "filePath": "auth/signup/page.tsx"
    },
    "/category/add/page": {
      "filePath": "category/add/page.tsx"
    },
    "/event/$eventId/page": {
      "filePath": "event/$eventId/page.tsx"
    },
    "/event/MyEvents/page": {
      "filePath": "event/MyEvents/page.tsx"
    },
    "/event/add/page": {
      "filePath": "event/add/page.tsx"
    },
    "/event/events/page": {
      "filePath": "event/events/page.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
